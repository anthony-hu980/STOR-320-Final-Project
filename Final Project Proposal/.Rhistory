DAYPLOT.func(DATA1, L101, "M")
DAYPLOT.func=function(data,sensor,dayabbrev){
SUB.DATA = data %>% select(sensor,DAY,DAYNAME) %>% filter(DAYNAME==dayabbrev)
plot=ggplot(data=SUB.DATA) +
geom_line(aes(x=1:dim(SUB.DATA)[1],y=get(sensor),color=as.factor(DAY))) +
theme_minimal() +
xlab("Time") + guides(color=guide_legend(title="Day in April"))+
ylab(dayabbrev) + ggtitle(paste("Plot for ",dayabbrev,sep=""))
plot
return(plot)
}
DAYPLOT.func(DATA1, "L101", "M")
DAYPLOT.func=function(data,sensor,dayabbrev){
SUB.DATA = data %>% select(sensor,DAY,DAYNAME) %>% filter(DAYNAME==dayabbrev)
plot=ggplot(data=SUB.DATA) +
geom_line(aes(x=1:dim(SUB.DATA)[1],y=get(sensor),color=as.factor(DAY))) +
theme_minimal() +
xlab("Time") + guides(color=guide_legend(title="Day in April"))+
ylab(dayabbrev) + ggtitle(paste("Plot for ",dayabbrev,sep=""))
plot
return(plot)
}
DAYPLOT.func(DATA1, "L102", "M")
DAYPLOT.func=function(data,sensor,dayabbrev){
SUB.DATA = data %>% select(sensor,DAY,DAYNAME) %>% filter(DAYNAME==dayabbrev)
plot=ggplot(data=SUB.DATA) +
geom_line(aes(x=1:dim(SUB.DATA)[1],y=get(sensor),color=as.factor(DAY))) +
theme_minimal() +
xlab("Time") + guides(color=guide_legend(title="Day in April"))+
ylab(dayabbrev) + ggtitle(paste("Plot for ",dayabbrev,sep=""))
plot
return(plot)
}
for(a in unique(DAY1$DAYNAME)){
print(DAYPLOT.func(DAY1, "L101", a))
}
DAYPLOT.func=function(data,sensor,dayabbrev){
SUB.DATA = data %>% select(sensor,DAY,DAYNAME) %>% filter(DAYNAME==dayabbrev)
plot=ggplot(data=SUB.DATA) +
geom_line(aes(x=1:dim(SUB.DATA)[1],y=get(sensor),color=as.factor(DAY))) +
theme_minimal() +
xlab("Time") + guides(color=guide_legend(title="Day in April"))+
ylab(dayabbrev) + ggtitle(paste("Plot for ",dayabbrev,sep=""))
plot
return(plot)
}
for(a in unique(DATA1$DAYNAME)){
print(DAYPLOT.func(DATA, "L101", a))
}
DAYPLOT.func=function(data,sensor,dayabbrev){
SUB.DATA = data %>% select(sensor,DAY,DAYNAME) %>% filter(DAYNAME==dayabbrev)
plot=ggplot(data=SUB.DATA) +
geom_line(aes(x=1:dim(SUB.DATA)[1],y=get(sensor),color=as.factor(DAY))) +
theme_minimal() +
xlab("Time") + guides(color=guide_legend(title="Day in April"))+
ylab(dayabbrev) + ggtitle(paste("Plot for ",dayabbrev,sep=""))
plot
return(plot)
}
for(a in unique(DATA1$DAYNAME)){
print(DAYPLOT.func(DATA1, "L101", a))
}
DAYPLOT.func=function(data,sensor,dayabbrev){
SUB.DATA = data %>% select(sensor,DAY,DAYNAME) %>% filter(DAYNAME==dayabbrev)
plot=ggplot(data=SUB.DATA) +
geom_line(aes(x=1:dim(SUB.DATA)[1],y=get(sensor),color=as.factor(DAY))) +
theme_minimal() +
xlab("Time") + guides(color=guide_legend(title="Day in April"))+
ylab(dayabbrev) + ggtitle(paste("Plot for ",dayabbrev,sep=""))
plot
return(plot)
}
for(a in unique(DATA1$sensor)){
for(b in unique(DATA1$DAYNAME)){
print(DAYPLOT.func(DATA1, a, b))
}
}
DAYPLOT.func=function(data,sensor,dayabbrev){
SUB.DATA = data %>% select(sensor,DAY,DAYNAME) %>% filter(DAYNAME==dayabbrev)
plot=ggplot(data=SUB.DATA) +
geom_line(aes(x=1:dim(SUB.DATA)[1],y=get(sensor),color=as.factor(DAY))) +
theme_minimal() +
xlab("Time") + guides(color=guide_legend(title="Day in April"))+
ylab(dayabbrev) + ggtitle(paste("Plot for ",dayabbrev,sep=""))
plot
return(plot)
}
DAYPLOT.func(data=COMPLETE,sensor=COMPLETE,dayabbrev=COMPLETE)
DAYPLOT.func(data=DATA2,sensor="L102", mdayabbrev="F")
DAYPLOT.func(DATA2,"L102", "F")
OCC=DATA1[,1:7] #DO NOT CHANGE
VOL=DATA2[,1:7] #DO NOT CHANGE
OCC
VOL
MED.AGG.OCC = apply(COMPLETE)
?apply
OCC
VOL
MED.AGG.OCC = apply(COMPLETE)
?apply
OCC
VOL
MED.AGG.OCC = apply(OCC, median)
?apply
OCC
VOL
MED.AGG.OCC = apply(OCC, med)
?apply
OCC
VOL
MED.AGG.OCC = apply(OCC, median)
?apply
?median
OCC
VOL
MED.AGG.OCC = apply(OCC, median)
?apply
OCC
VOL
MED.AGG.OCC = apply(OCC, median)
?apply
OCC
VOL
MED.AGG.OCC = apply(OCC, 2, median)
MED.AGG.VOL = apply(VOL, 2, median)
plot(MED.AGG.OCC,type="l") #DO NOT CHANGE
plot(MED.AGG.VOL,type="l") #DO NOT CHANGE
?apply
MED.AGG.OCC = apply(OCC, 2, median)
MED.AGG.VOL = apply(VOL, 2, median)
plot(MED.AGG.OCC,type="l") #DO NOT CHANGE
plot(MED.AGG.VOL,type="l") #DO NOT CHANGE
x=c(35,27,28,40)    #DO NOT CHANGE
range=max(x)-min(x) #DO NOT CHANGE
print(range)        #DO NOT CHANGE
x=c(35,27,28,40)    #DO NOT CHANGE
range=max(x)-min(x) #DO NOT CHANGE
print(range)        #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(COMPLETE)
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, 5)
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, 100)
print(RANGE.func(try)) #DO NOT CHANGE
RANGE.AGG.OCC = apply(OCC, 2, RANGE.func)
RANGE.AGG.VOL = apply(VOL, 2, RANGE.func)
plot(RANGE.AGG.OCC,type="l") #DO NOT CHANGE
plot(RANGE.AGG.VOL,type="l") #DO NOT CHANGE
names(OCC)
for(a in names(OCC))
RANGE.AGG.OCC = apply(OCC, 2, RANGE.func)
RANGE.AGG.VOL = apply(VOL, 2, RANGE.func)
plot(RANGE.AGG.OCC,type="l") #DO NOT CHANGE
plot(RANGE.AGG.VOL,type="l") #DO NOT CHANGE
names(OCC)
for(a in names(OCC)){
print(range(a))
}
RANGE.AGG.OCC = apply(OCC, 2, RANGE.func)
RANGE.AGG.VOL = apply(VOL, 2, RANGE.func)
plot(RANGE.AGG.OCC,type="l") #DO NOT CHANGE
plot(RANGE.AGG.VOL,type="l") #DO NOT CHANGE
names(OCC)
for(a in names(OCC)){
print(a)
}
RANGE.AGG.OCC = apply(OCC, 2, RANGE.func)
RANGE.AGG.VOL = apply(VOL, 2, RANGE.func)
plot(RANGE.AGG.OCC,type="l") #DO NOT CHANGE
plot(RANGE.AGG.VOL,type="l") #DO NOT CHANGE
names(OCC)
for(a in names(OCC)){
print(max(a)-min(a))
}
names(OCC)
?range
for(a in names(OCC)){
print(max(a)-min(a))
}
names(OCC)
?range
?vector
return <- vector("")
names(OCC)
?vector
return <- vector("")
names(OCC)
?vector
return <- vector("raw", length(names(OCC)), TRUE)
names(OCC)
?vector
return <- vector("raw", length(names(OCC)))
for(a in names(OCC)){
print(max(a)-min(a))
}
names(OCC)
?vector
range(OCC$L101)
RANGE.AGG.OCC = apply(OCC, 2, RANGE.func)
RANGE.AGG.VOL = apply(VOL, 2, RANGE.func)
plot(RANGE.AGG.OCC,type="l") #DO NOT CHANGE
plot(RANGE.AGG.VOL,type="l") #DO NOT CHANGE
names(OCC)
?vector
?range
range(OCC$L101)
RANGE.AGG.OCC = apply(OCC, 2, RANGE.func)
RANGE.AGG.VOL = apply(VOL, 2, RANGE.func)
plot(RANGE.AGG.OCC,type="l") #DO NOT CHANGE
plot(RANGE.AGG.VOL,type="l") #DO NOT CHANGE
OCC
range(OCC$L101)
RANGE.AGG.OCC = apply(OCC, 2, RANGE.func)
RANGE.AGG.VOL = apply(VOL, 2, RANGE.func)
plot(RANGE.AGG.OCC,type="l") #DO NOT CHANGE
plot(RANGE.AGG.VOL,type="l") #DO NOT CHANGE
arrange(OCC, L101)
range(OCC$L101)
RANGE.AGG.OCC = apply(OCC, 2, RANGE.func)
RANGE.AGG.VOL = apply(VOL, 2, RANGE.func)
plot(RANGE.AGG.OCC,type="l") #DO NOT CHANGE
plot(RANGE.AGG.VOL,type="l") #DO NOT CHANGE
arrange(OCC, L101)
arrange(OCC, desc(L101))
range(OCC$L101)
RANGE.AGG.OCC = apply(OCC, 2, RANGE.func)
RANGE.AGG.VOL = apply(VOL, 2, RANGE.func)
plot(RANGE.AGG.OCC,type="l") #DO NOT CHANGE
plot(RANGE.AGG.VOL,type="l") #DO NOT CHANGE
range(OCC$L101)
RANGE.AGG.OCC = apply(OCC, 2, RANGE.func)
RANGE.AGG.VOL = apply(VOL, 2, RANGE.func)
plot(RANGE.AGG.OCC,type="l") #DO NOT CHANGE
plot(RANGE.AGG.VOL,type="l") #DO NOT CHANGE
RANGE.AGG.OCC = apply(OCC, 2, RANGE.func)
RANGE.AGG.VOL = apply(VOL, 2, RANGE.func)
plot(RANGE.AGG.OCC,type="l") #DO NOT CHANGE
plot(RANGE.AGG.VOL,type="l") #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, 100^100)
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, 100*100)
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, 100^3)
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100, 1))
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
#Function
RANGE.func=function(x){
range = max(x) - min(x)
}
#Output
try = c(1, 2, 3, 4, sample.int(100000, 1))
try
print(RANGE.func(try)) #DO NOT CHANGE
